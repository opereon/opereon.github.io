__NUXT_JSONP__("/docs/template", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q){return {data:[{document:{slug:"template",description:null,title:"Templates",category:"Docs",position:6,prev:"\u002Fdocs\u002Fopath\u002F",next:"\u002Fdocs\u002Fprocedures\u002F",toc:[{id:B,depth:u,text:C},{id:D,depth:u,text:E},{id:F,depth:u,text:G},{id:H,depth:q,text:v},{id:I,depth:q,text:J},{id:K,depth:q,text:w},{id:L,depth:q,text:s},{id:M,depth:q,text:t},{id:N,depth:q,text:x}],body:{type:"root",children:[{type:b,tag:e,props:{},children:[{type:a,value:"When dealing with configuring systems and services, there is often a need to prepare configuration files."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"In order to keep true to the "},{type:b,tag:"em",props:{},children:[{type:a,value:"single source of truth"}]},{type:a,value:" rule, with "},{type:b,tag:y,props:{to:"\u002F"},children:[{type:a,value:"Opereon"}]},{type:a,value:", we provide a custom template engine,\nallowing to create configuration files from data contained withing the "},{type:b,tag:y,props:{to:"\u002Fdocs\u002Fmodel"},children:[{type:a,value:"model"}]},{type:a,value:"."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Our template engine has a syntax generally inspired by tried and tested\n"},{type:b,tag:k,props:{href:"https:\u002F\u002Fvelocity.apache.org\u002Fengine\u002F2.3\u002Fvtl-reference.html",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:"Velocity Template Language"}]},{type:a,value:", but with significant\ndifferences."}]},{type:a,value:c},{type:b,tag:z,props:{id:B},children:[{type:b,tag:k,props:{href:"#variables",ariaHidden:l,tabIndex:m},children:[{type:b,tag:n,props:{className:[o,p]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"All variables used in the template are prefixed with a dollar sign '$' sigil, like in "},{type:b,tag:y,props:{to:O},children:[{type:a,value:"Opath"}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#set $test=true\n"}]}]}]},{type:a,value:c},{type:b,tag:z,props:{id:D},children:[{type:b,tag:k,props:{href:"#interpolations",ariaHidden:l,tabIndex:m},children:[{type:b,tag:n,props:{className:[o,p]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Variable values, and more generally Opath expressions, can be printed to the output with the use of interpolation\nin the form"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C%\u003Copath\u003E%\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"For example, to output "},{type:b,tag:d,props:{},children:[{type:a,value:"login"}]},{type:a,value:" property of a "},{type:b,tag:d,props:{},children:[{type:a,value:"$user"}]},{type:a,value:" variable, the following can be used:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"Logged in as \u003C% $user.login %\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:z,props:{id:F},children:[{type:b,tag:k,props:{href:"#directives",ariaHidden:l,tabIndex:m},children:[{type:b,tag:n,props:{className:[o,p]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Template directive names in simple form are prefixed with a hash sign "},{type:b,tag:d,props:{},children:[{type:a,value:"#"}]},{type:a,value:" i.e."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#directive\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"In a canonical form they are in addition surrounded in curly braces "},{type:b,tag:d,props:{},children:[{type:a,value:"{"}]},{type:a,value:" and "},{type:b,tag:d,props:{},children:[{type:a,value:"}"}]},{type:a,value:",  i.e."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#{directive}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This form is useful in one-line expressions to avoid adding spaces into the output"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#{if $test}Test is true#{else}Test is false#{end}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"For directives with arguments, there can be any number of whitespaces between directive name and arguments. In\ncanonical form, whitespaces are also allowed inside curly braces. For example, all variants below are equivalent:"}]},{type:a,value:c},{type:b,tag:"ul",props:{},children:[{type:a,value:c},{type:b,tag:A,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#set $var1='String value'"}]}]},{type:a,value:c},{type:b,tag:A,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#set $var1 = 'String value'"}]}]},{type:a,value:c},{type:b,tag:A,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#{  set  $var1='String value' }"}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{id:H},children:[{type:b,tag:k,props:{href:v,ariaHidden:l,tabIndex:m},children:[{type:b,tag:n,props:{className:[o,p]},children:[]}]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Set directive is used to assign value (Opath nodes) to a variable.\nThis directive has a general form"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#set $variable=\u003Copath\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"and canonical form"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#{set $variable=\u003Copath\u003E}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Example"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#set $users = $.users[*]\n"}]}]}]},{type:a,value:c},{type:b,tag:r,props:{id:I},children:[{type:b,tag:k,props:{href:"#ifelseifelse",ariaHidden:l,tabIndex:m},children:[{type:b,tag:n,props:{className:[o,p]},children:[]}]},{type:a,value:J}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"If\u002Felse directive provides conditional instruction flow to a template rendering. It has a general form of"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#if \u003COpath expression\u003E output #end\n#if \u003COpath expression\u003E output #else output #end\n#if \u003COpath expression\u003E output #elseif \u003COpath expression\u003E output #else output #end\n"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#{if \u003COpath expression\u003E}output#end\n#{if \u003COpath expression\u003E}output#{else}output#end\n#{if \u003COpath expression\u003E}output#{elseif \u003COpath expression\u003E}output#{else}output#end\n"}]}]}]},{type:a,value:c},{type:b,tag:r,props:{id:K},children:[{type:b,tag:k,props:{href:w,ariaHidden:l,tabIndex:m},children:[{type:b,tag:n,props:{className:[o,p]},children:[]}]},{type:a,value:w}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"For directive executes its body for every value in provided expression"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#for \u003COpath expression\u003E output #end\n#for \u003COpath expression\u003E output #else output #end\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"As a special case, when loop expression evaluates to empty, and "},{type:b,tag:d,props:{},children:[{type:a,value:"#else"}]},{type:a,value:" block is defined, it will be output instead."}]},{type:a,value:c},{type:b,tag:r,props:{id:L},children:[{type:b,tag:k,props:{href:s,ariaHidden:l,tabIndex:m},children:[{type:b,tag:n,props:{className:[o,p]},children:[]}]},{type:a,value:s}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Def directive allows to define template blocks which can be evaluated with arguments in the template, not unlike VTK macros.\nThis directive has a general form"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#def name(\u003Cvariables\u003E) output #end \n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:P}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#def is_equal($a, $b)\n  #if $a==$b\n  values are equal\n  #end \n#end \n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Note that the definition block itself will not produce any output. In order to use such definition, "},{type:b,tag:d,props:{},children:[{type:a,value:t}]},{type:a,value:" directive is used."}]},{type:a,value:c},{type:b,tag:r,props:{id:M},children:[{type:b,tag:k,props:{href:t,ariaHidden:l,tabIndex:m},children:[{type:b,tag:n,props:{className:[o,p]},children:[]}]},{type:a,value:t}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Print directive is used to output a defined template block (see "},{type:b,tag:k,props:{href:s},children:[{type:a,value:s}]},{type:a,value:").\nThis directive has a general form"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#print name(\u003Copath\u003E,...) \n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:P}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#print is_equal(1, 2)\n"}]}]}]},{type:a,value:c},{type:b,tag:r,props:{id:N},children:[{type:b,tag:k,props:{href:x,ariaHidden:l,tabIndex:m},children:[{type:b,tag:n,props:{className:[o,p]},children:[]}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Include directive can be used to output content of another file into the template, either as a simple text or another\ntemplate.\nThis directive has a general form"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#include \u003Copath\u003E\n#include \u003Copath\u003E, resolve=\u003Copath\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The special argument "},{type:b,tag:d,props:{},children:[{type:a,value:"resolve"}]},{type:a,value:" indicates, whether the file's content, as pointed by the Opath expression, should be\nparsed as another template or simply copied to the output. By default, all included files are parsed as templates."}]}]},dir:"\u002Fen\u002Fdocs",path:"\u002Fen\u002Fdocs\u002Ftemplate",extension:".md",createdAt:Q,updatedAt:Q,to:"\u002Fdocs\u002Ftemplate"},prev:{title:"Opath query language",path:"\u002Fen\u002Fdocs\u002Fopath",to:O},next:{title:"Procedures",path:"\u002Fen\u002Fdocs\u002Fprocedures",to:"\u002Fdocs\u002Fprocedures"}}],fetch:{},mutations:[]}}("text","element","\n","code","p","div","nuxt-content-highlight","pre","language-text","line-numbers","a","true",-1,"span","icon","icon-link",3,"h3","#def","#print",2,"#set","#for","#include","nuxt-link","h2","li","variables","Variables","interpolations","Interpolations","directives","Directives","set","ifelseifelse","#if\u002F#elseif\u002F#else","for","def","print","include","\u002Fdocs\u002Fopath","for example:","2021-11-15T17:28:57.095Z")));