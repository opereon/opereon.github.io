__NUXT_JSONP__("/docs/model", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar){return {data:[{document:{slug:"model",description:"Data model for managed infrastructure",title:"Data model",category:"Docs",position:4,prev:"\u002Fdocs\u002Finstall\u002F",next:"\u002Fdocs\u002Fopath\u002F",toc:[{id:Y,depth:Z,text:_},{id:$,depth:Z,text:aa},{id:ab,depth:S,text:ac},{id:ad,depth:S,text:ae},{id:af,depth:S,text:ag}],body:{type:"root",children:[{type:b,tag:o,props:{},children:[{type:a,value:"In our approach to ICT automation, everything is built around a concept of "},{type:b,tag:T,props:{},children:[{type:a,value:"data model"}]},{type:a,value:" representing every piece of significant\ninformation about the managed infrastructure in the form of a "},{type:b,tag:T,props:{},children:[{type:a,value:"versioned"}]},{type:a,value:g},{type:b,tag:T,props:{},children:[{type:a,value:"file tree"}]},{type:a,value:". All of the necessary facts about\nactors (managed hosts, users, services, etc.) are represented by set of (mostly) textual files, that are easy to edit and\nmaintain. The organizational structure of actors can be reflected by file tree structure."}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"The model is kept in a single "},{type:b,tag:q,props:{href:"https:\u002F\u002Fgit-scm.com",rel:[I,J,K],target:L},children:[{type:a,value:"git"}]},{type:a,value:" repository for change tracking. When used, the\ndata from files is then transformed into an generalized object tree, which can be traversed and searched with the use\nof our own specialized data query language "},{type:b,tag:"nuxt-link",props:{to:ah},children:[{type:a,value:"Opath"}]},{type:a,value:ai}]},{type:a,value:f},{type:b,tag:aj,props:{id:Y},children:[{type:b,tag:q,props:{href:"#introduction",ariaHidden:s,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:_}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"For illustration purposes, consider the following directory, containing some crucial pieces of information about a very\nsimple infrastructure, with one host named "},{type:b,tag:l,props:{},children:[{type:a,value:U}]},{type:a,value:" and one user account named "},{type:b,tag:l,props:{},children:[{type:a,value:ak}]},{type:a,value:ai}]},{type:a,value:f},{type:b,tag:x,props:{className:[y]},children:[{type:b,tag:z,props:{className:[A,al]},children:[{type:b,tag:l,props:{},children:[{type:a,value:".\n├── hosts\u002F\n│    └── server1\u002F\n│        ├── .etc\u002F\n│        │   └── ssh\u002F\n│        │       ├── ssh_host_rsa_key\n│        │       └── ssh_host_rsa_key.pub\n│        └── _.yaml\n└── users\u002F\n    └── john\u002F\n        ├── .ssh\u002F\n        │   └── id_rsa.pub\n        └── _.json\n"}]}]}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"Of particular interest in this discussion are the files presented below:"}]},{type:a,value:f},{type:b,tag:x,props:{className:[y]},children:[{type:b,tag:c,props:{className:[M]},children:[{type:a,value:"hosts\u002Fserver1\u002F_.yaml"}]},{type:b,tag:z,props:{className:[A,"language-yaml"]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,h,r]},children:[{type:a,value:"hostname"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:" server1\n"},{type:b,tag:c,props:{className:[d,h,r]},children:[{type:a,value:"domain"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:" example.org\n"},{type:b,tag:c,props:{className:[d,h,r]},children:[{type:a,value:"net"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,h,r]},children:[{type:a,value:"eth0"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n    "},{type:b,tag:c,props:{className:[d,h,r]},children:[{type:a,value:"ip4"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n      "},{type:b,tag:c,props:{className:[d,h,r]},children:[{type:a,value:"address"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:" 192.168.1.100\n      "},{type:b,tag:c,props:{className:[d,h,r]},children:[{type:a,value:"mask"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:" 255.255.255.0\n      "},{type:b,tag:c,props:{className:[d,h,r]},children:[{type:a,value:"gateway"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:" 192.168.1.1\n"},{type:b,tag:c,props:{className:[d,h,r]},children:[{type:a,value:"packages"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:a,value:"mc"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:" vim"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:" nmap"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:x,props:{className:[y]},children:[{type:b,tag:c,props:{className:[M]},children:[{type:a,value:"users\u002Fjohn\u002F_.json"}]},{type:b,tag:z,props:{className:[A,"language-json"]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:"{"}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\"username\""}]},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:p}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"john\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\"email\""}]},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:p}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"johnny@example.org\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\"first_name\""}]},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:p}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"John\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\"last_name\""}]},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:p}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"Smith\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:"}"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"which contain some arbitrary metadata about the host "},{type:b,tag:l,props:{},children:[{type:a,value:U}]},{type:a,value:" and the user "},{type:b,tag:l,props:{},children:[{type:a,value:ak}]},{type:a,value:" respectively."}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"The files in "},{type:b,tag:l,props:{},children:[{type:a,value:"hosts\u002Fserver1\u002Fetc\u002Fssh\u002F"}]},{type:a,value:" folder contain private and public keys for SSH service on the host. It would be\ndesired in this example, that the actual SSH service keys, which are presumably kept in "},{type:b,tag:l,props:{},children:[{type:a,value:"\u002Fetc\u002Fssh"}]},{type:a,value:" folder on the "},{type:b,tag:l,props:{},children:[{type:a,value:U}]},{type:a,value:",\nshould always be identical to those in the file structure. That way, in case of catastrophic hardware failure, the host can be\nrecreated on another hardware, with identical SSH fingerprint."}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"As it can be seen from the example, such file set can intuitively and efficiently store in a "},{type:b,tag:"em",props:{},children:[{type:a,value:"declarative manner"}]},{type:a,value:" a desired\nconfiguration of the managed infrastructure. By changing some metadata inside the file set (for instance changing IP\naddress for the hosts) and running Opereon toolchain on the file set, that change should be performed on the actual host\nby executing a defined set of administrative tasks (like reconfiguring network interfaces)."}]},{type:a,value:f},{type:b,tag:aj,props:{id:$},children:[{type:b,tag:q,props:{href:"#data-representation",ariaHidden:s,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:aa}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"Files in the model can contain arbitrary JSON-like data (currently supported parsable formats include "},{type:b,tag:q,props:{href:"https:\u002F\u002Fwww.json.org",rel:[I,J,K],target:L},children:[{type:a,value:"JSON"}]},{type:a,value:",\n"},{type:b,tag:q,props:{href:"https:\u002F\u002Fyaml.org",rel:[I,J,K],target:L},children:[{type:a,value:"YAML"}]},{type:a,value:" and "},{type:b,tag:q,props:{href:"https:\u002F\u002Fgithub.com\u002Ftoml-lang\u002Ftoml",rel:[I,J,K],target:L},children:[{type:a,value:"TOML"}]},{type:a,value:").\nOther data formats are treated as binary files."}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"All of the files are transformed into an object tree in memory when in use by Opereon tools. The rules of this\ntransformation are configurable, as described below."}]},{type:a,value:f},{type:b,tag:V,props:{id:ab},children:[{type:b,tag:q,props:{href:"#manifest-file",ariaHidden:s,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:ac}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"At the root of file tree representing data model for Opereon, there must be preset a manifest file. Manifest file is by\ndefault named "},{type:b,tag:l,props:{},children:[{type:a,value:am}]},{type:a,value:". Manifest file contains general information and definitions of variables, that can be used across further configuraation."}]},{type:a,value:f},{type:b,tag:x,props:{className:[y]},children:[{type:b,tag:c,props:{className:[M]},children:[{type:a,value:am}]},{type:b,tag:z,props:{className:[A,an],dataLine:"numberLines: true"},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t,u]},children:[{type:a,value:"info"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:"authors"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"John \u003Cjohnny@example.org\u003E\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"Mark \u003Cmark@example.org\u003E\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:"description"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"Server farm 1\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t,u]},children:[{type:a,value:"defines"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\n$users "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"$.conf.users.*\""}]},{type:a,value:"\n$hosts "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"$.conf.hosts.*\""}]},{type:a,value:"\n$procs "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"$.(proc, probe).**[@.proc != null]\""}]},{type:a,value:"\n$user_defined_expr_1 "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"$.**[custom_property == 'custom_value']\""}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:V,props:{id:ad},children:[{type:b,tag:q,props:{href:"#settings-file",ariaHidden:s,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:ae}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"Everywhere in the data model, a user can also define a file named "},{type:b,tag:l,props:{},children:[{type:a,value:G}]},{type:a,value:", containing settings used when reading the model\ninto the object tree. The settings are overwritten by a setting file in hierarchical fashion, for the folder in which the\n"},{type:b,tag:l,props:{},children:[{type:a,value:G}]},{type:a,value:" file is located, and its subfolders, unless further overwritten with nested "},{type:b,tag:l,props:{},children:[{type:a,value:G}]},{type:a,value:" files."}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"By default, if no "},{type:b,tag:l,props:{},children:[{type:a,value:G}]},{type:a,value:" file is present anywhere in the model, the default settings are used, as presented below."}]},{type:a,value:f},{type:b,tag:x,props:{className:[y]},children:[{type:b,tag:c,props:{className:[M]},children:[{type:a,value:G}]},{type:b,tag:z,props:{className:[A,an]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"# flag indicating, if rules should be included from defaults"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:"inherit_excludes"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,W]},children:[{type:a,value:s}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:"inherit_includes"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,W]},children:[{type:a,value:s}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:"inherit_overrides"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,W]},children:[{type:a,value:s}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"# rule excluding all files starting with '.' from loading to object tree, they will be skipped by next rules"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t,u]},children:[{type:a,value:"exclude"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:H}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"**\u002F.*\u002F**\""}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"# rule including all directiories appending them to parent object under file name key as empty objects"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t,u]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:H}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:P}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"dir\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:Q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"${map()}\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"${$.find(array($item.@file_path_components[..-2]).join('.')).set($item.@file_name, $item)}\""}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"# rule including _.yaml, _.yml, _.toml, _.json, loading them as object tree and merging with object created by directory rule"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t,u]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:H}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"**\u002F_.{yaml,yml,toml,json}\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:P}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:X}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:Q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ap}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"${$.find(array($item.@file_path_components[..-2]).join('.')).extend($item)}\""}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"# rule including _.yaml, _.yml, _.toml, _.json, loading them as object tree and appending it to object created by directory rule as property under file name key."}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t,u]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:H}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"**\u002F*.{yaml,yml,toml,json}\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:P}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:X}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:Q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ap}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aq}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"# rule including other files, loading them as text  appending it to object created by directory rule as property under file name key."}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t,u]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:H}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:P}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:X}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:Q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"\"${loadFile(@.@file_path, 'text')}\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,h,j]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aq}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"# section for overriding parent rules, the rules are matched by type and path"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,t,u]},children:[{type:a,value:"overrides"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"# no overrides"}]},{type:a,value:w}]}]}]},{type:a,value:f},{type:b,tag:V,props:{id:af},children:[{type:b,tag:q,props:{href:"#object-tree",ariaHidden:s,tabIndex:C},children:[{type:b,tag:c,props:{className:[D,E]},children:[]}]},{type:a,value:ag}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:a,value:"The presented above data model is loaded with given settings into object tree presented in JSON:"}]},{type:a,value:f},{type:b,tag:x,props:{className:[y]},children:[{type:b,tag:z,props:{className:[A,al]},children:[{type:b,tag:l,props:{},children:[{type:a,value:"{\n    \"users\": { \n        \"john\" : {\n            \"username\": \"john\",\n            \"email\": \"johnny@example.org\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Smith\"\n        }\n    },\n    \"hosts\": {\n        \"server1\": {\n            \"hostname\": \"server1\",\n            \"domain\": \"example.org\",\n            \"net\": {\n                \"eth0\": {\n                    \"ip4\": {\n                        \"address\": \"192.168.1.100\",\n                        \"mask\": \"255.255.255.0\",\n                        \"gateway\": \"192.168.1.1\"\n                    }\n                }\n            },\n            \"packages\": [\"mc\", \"vim\", \"nmap\"]\n        }\n    }\n}\n"}]}]}]}]},dir:"\u002Fen\u002Fdocs",path:"\u002Fen\u002Fdocs\u002Fmodel",extension:".md",createdAt:ar,updatedAt:ar,to:"\u002Fdocs\u002Fmodel"},prev:{title:"Installation",path:"\u002Fen\u002Fdocs\u002Finstall",to:"\u002Fdocs\u002Finstall"},next:{title:"Opath query language",path:"\u002Fen\u002Fdocs\u002Fopath",to:ah}}],fetch:{},mutations:[]}}("text","element","span","token","punctuation","\n"," ","key","string","property","=","code","[","]","p",":","a","atrule","true","table","class-name","comment","\n\n","div","nuxt-content-highlight","pre","line-numbers",",",-1,"icon","icon-link","\n  ",".operc","path","nofollow","noopener","noreferrer","_blank","filename","operator","include","file_type","item","mapping",3,"strong","server1","h3","boolean","\"file\"","introduction",2,"Introduction","data-representation","Data representation","manifest-file","Manifest file","settings-file","Settings file","object-tree","Object tree","\u002Fdocs\u002Fopath",".","h2","john","language-text","op.toml","language-toml","\"**\u002F*\"","\"${loadFile(@.@file_path, @.@file_ext)}\"","\"${$.find(array($item.@file_path_components[..-2]).join('.')).set($item.@file_stem, $item)}\"","2021-11-17T13:50:25.884Z")));