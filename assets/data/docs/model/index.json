{"hash":"1a30052631ef5dda69d4a6907c0265d4c16c39f5","data":{"markdownPage":{"id":"a3082fe6f8c771ed4bdecc1d8967fa1a","title":"Data model","description":"Data model for managed infrastructure","path":"/docs/model/","content":"<h1 id=\"data-model\"><a href=\"#data-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data model</h1>\n<p>In our approach to ICT automation, everything is built around a concept of <strong>data model</strong> representing every piece of significant\ninformation about the managed infrastructure in the form of a <strong>versioned</strong> <strong>file tree</strong>. All of the necessary facts about\nmanaged hosts, users, services, etc. are represented by set of (mostly) textual files, that are easy to edit and\nmaintain.</p>\n<p>The model is kept in a single <a href=\"https://git-scm.com\" target=\"_blank\" rel=\"noopener noreferrer\">git</a> repository for change tracking. When used, the\ndata from files is then transformed into an generalized object tree, which can be traversed and searched with the use\nof our own specialized data query language <a href=\"/docs/opath\">Opath</a>.</p>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction</h2>\n<p>For illustration purposes, consider the following directory, containing some crucial pieces of information about a very\nsimple infrastructure, with one host named <code class=\"language-text\">server1</code> and one user account named <code class=\"language-text\">john</code>.  </p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── hosts/\n│    └── server1/\n│        ├── etc/\n│        │   └── ssh/\n│        │       ├── ssh_host_rsa_key\n│        │       └── ssh_host_rsa_key.pub\n│        └── _.yaml\n└── users/\n    └── john/\n        ├── ssh/\n        │   └── id_rsa.pub\n        └── _.json</code></pre></div>\n<p>Of particular interest in this discussion are the files presented below:</p>\n<div class=\"gridsome-code-title\"><span> hosts/server1/_.yaml</span></div><div class=\"gridsome-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber 0\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> server1\n<span class=\"token key atrule\">domain</span><span class=\"token punctuation\">:</span> example.org\n<span class=\"token key atrule\">net</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">eth0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ip4</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> 192.168.1.100\n      <span class=\"token key atrule\">mask</span><span class=\"token punctuation\">:</span> 255.255.255.0\n      <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span> 192.168.1.1\n<span class=\"token key atrule\">packages</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>mc<span class=\"token punctuation\">,</span> vim<span class=\"token punctuation\">,</span> nmap<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gridsome-code-title\"><span> users/john/_.json</span></div><div class=\"gridsome-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber 0\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"johnny@example.org\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Smith\"</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>which contain some arbitrary metadata about the host <code class=\"language-text\">server1</code> and the user <code class=\"language-text\">john</code> respectively.</p>\n<p>The files in <code class=\"language-text\">hosts/server1/etc/ssh/</code> folder contain private and public keys for SSH service on the host. It would be\ndesired in this example, that the actual SSH service keys, which are presumably kept in <code class=\"language-text\">/etc/ssh</code> folder on the <code class=\"language-text\">server1</code>,\nshould always be identical to those in the file structure. That way, in case of catastrophic hardware failure, the host can be\nrecreated on another hardware, with identical SSH fingerprint. </p>\n<p>As it can be seen from the example, such file set can intuitively and efficiently store in a <em>declarative manner</em> a desired\nconfiguration of the managed infrastructure. By changing some metadata inside the file set (for instance changing IP\naddress for the hosts) and running Opereon toolchain on the file set, that change should be performed on the actual host\nby executing a defined set of administrative tasks (like reconfiguring network interfaces).</p>\n<h2 id=\"data-representation\"><a href=\"#data-representation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data representation</h2>\n<p>Files in the model can contain arbitrary JSON-like data (currently supported parsable formats include <a href=\"https://www.json.org\" target=\"_blank\" rel=\"noopener noreferrer\">JSON</a>,\n<a href=\"https://yaml.org\" target=\"_blank\" rel=\"noopener noreferrer\">YAML</a> and <a href=\"https://github.com/toml-lang/toml\" target=\"_blank\" rel=\"noopener noreferrer\">TOML</a>).\nOther data formats are treated as binary files. </p>\n<p>All of the files are transformed into an object tree in memory when in use by Opereon tools. The rules of this\ntransformation are configurable, as described below. </p>\n<h3 id=\"manifest-file\"><a href=\"#manifest-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Manifest file</h3>\n<p>At the root of file tree representing data model for Opereon, there must be preset a manifest file. Manifest file is by\ndefault named <code class=\"language-text\">op.toml</code></p>\n<div class=\"gridsome-code-title\"><span> op.toml</span></div><div class=\"gridsome-highlight\" data-language=\"toml\"><pre style=\"counter-reset: linenumber 0\" class=\"language-toml line-numbers\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">info</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John &lt;johnny@example.org>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mark &lt;mark@example.org>\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"Server farm 1\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">defines</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">users</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"$.conf.users.*\"</span>\n<span class=\"token key property\">hosts</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"$.conf.hosts.*\"</span>\n<span class=\"token key property\">procs</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"$.(proc, probe).**[@.proc != null]\"</span>\n<span class=\"token key property\">user_defined_expr_1</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"$.**[custom_property == 'custom_value']\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"settings-file\"><a href=\"#settings-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Settings file</h3>\n<p>Everywhere in the data model, a user can also define a file named <code class=\"language-text\">.operc</code>, containing settings used when reading the model\ninto the object tree. The settings are overwritten by a setting file in hierarchical fashion, for the folder in which the\n<code class=\"language-text\">.operc</code> file is located, and its subfolders, unless further overwritten with nested <code class=\"language-text\">.operc</code> files.</p>\n<p>By default, if no <code class=\"language-text\">.operc</code> file is present anywhere in the model, the default settings are used, as presented below. </p>\n<div class=\"gridsome-code-title\"><span> .operc</span></div><div class=\"gridsome-highlight\" data-language=\"toml\"><pre style=\"counter-reset: linenumber 0\" class=\"language-toml line-numbers\"><code class=\"language-toml\"><span class=\"token key property\">inherit_excludes</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">inherit_includes</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">inherit_overrides</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">exclude</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"**/.*/**\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">include</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"**/*\"</span>\n<span class=\"token key property\">file_type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"dir\"</span>\n<span class=\"token key property\">item</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"${map()}\"</span>\n<span class=\"token key property\">mapping</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"${$.find(array($item.@file_path_components[..-2]).join('.')).set($item.@file_name, $item)}\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">include</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"**/_.{yaml,yml,toml,json}\"</span>\n<span class=\"token key property\">file_type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"file\"</span>\n<span class=\"token key property\">item</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"${loadFile(@.@file_path, @.@file_ext)}\"</span>\n<span class=\"token key property\">mapping</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"${$.find(array($item.@file_path_components[..-2]).join('.')).extend($item)}\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">include</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"**/*.{yaml,yml,toml,json}\"</span>\n<span class=\"token key property\">file_type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"file\"</span>\n<span class=\"token key property\">item</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"${loadFile(@.@file_path, @.@file_ext)}\"</span>\n<span class=\"token key property\">mapping</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"${$.find(array($item.@file_path_components[..-2]).join('.')).set($item.@file_stem, $item)}\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">include</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">path</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"**/*\"</span>\n<span class=\"token key property\">file_type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"file\"</span>\n<span class=\"token key property\">item</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"${loadFile(@.@file_path, 'text')}\"</span>\n<span class=\"token key property\">mapping</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"${$.find(array($item.@file_path_components[..-2]).join('.')).set($item.@file_stem, $item)}\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">overrides</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># no overrides</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n","sidebar":"docs","next":"/docs/opath/","prev":"/docs/install/","headings":[{"depth":1,"value":"Data model","anchor":"#data-model"},{"depth":2,"value":"Introduction","anchor":"#introduction"},{"depth":2,"value":"Data representation","anchor":"#data-representation"},{"depth":3,"value":"Manifest file","anchor":"#manifest-file"},{"depth":3,"value":"Settings file","anchor":"#settings-file"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/docs/install/","title":"Installation"}},{"node":{"path":"/docs/template/","title":"Templates"}},{"node":{"path":"/docs/quickstart/","title":"Quick start"}},{"node":{"path":"/docs/overview/","title":"Overview"}},{"node":{"path":"/docs/procedures/","title":"Procedures"}},{"node":{"path":"/docs/opath/","title":"Opath query language"}},{"node":{"path":"/docs/model/","title":"Data model"}},{"node":{"path":"/docs/","title":"Documentation"}}]}},"context":{}}