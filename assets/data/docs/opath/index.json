{"hash":"1a30052631ef5dda69d4a6907c0265d4c16c39f5","data":{"markdownPage":{"id":"5f0cfda6c65c6155d942a6e5b6b584b7","title":"Opath query language","description":"Definition of object tree query language Opath","path":"/docs/opath/","content":"<h1 id=\"opath-query-language\"><a href=\"#opath-query-language\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Opath query language</h1>\n<p>Opath is a simple language for object tree lookup and transformation, similar to\n<a href=\"https://www.w3.org/TR/xpath/\" target=\"_blank\" rel=\"noopener noreferrer\">XPath</a> in function.</p>\n<h2 id=\"data-types\"><a href=\"#data-types\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data types</h2>\n<p>All data types transferable through <code class=\"language-text\">json</code>, <code class=\"language-text\">yaml</code> and <code class=\"language-text\">toml</code> formats are supported.</p>\n<ul>\n<li><em>null</em> - empty value</li>\n<li><em>number</em> - internally stored as either 64-bit integer or 64-bit float</li>\n<li><em>boolean</em> - <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code></li>\n<li><em>string</em> - strings are stored as UTF-8 encoded data.</li>\n<li><em>binary</em> - binary data.</li>\n<li><em>object</em> - object or map, can contain string-keyed properties</li>\n<li><em>array</em> - array or sequence of elements</li>\n</ul>\n<h2 id=\"literals\"><a href=\"#literals\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Literals</h2>\n<ul>\n<li><code class=\"language-text\">123</code>, <code class=\"language-text\">-2</code> - 64-bit integer values</li>\n<li><code class=\"language-text\">1.13</code>, <code class=\"language-text\">.e10</code>, <code class=\"language-text\">-1E-2</code>, <code class=\"language-text\">.3</code> - 64-bit float values</li>\n<li><code class=\"language-text\">&#39;id&#39;</code>, <code class=\"language-text\">&quot;id&quot;</code> - string values</li>\n<li><code class=\"language-text\">true</code>, <code class=\"language-text\">false</code> - boolean values</li>\n<li><code class=\"language-text\">null</code> - null value</li>\n</ul>\n<h2 id=\"type-conversions\"><a href=\"#type-conversions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Type conversions</h2>\n<p>Same as ECMAScript, integers are promoted to floats when mixed operands are used.</p>\n<h2 id=\"mathematical-operators\"><a href=\"#mathematical-operators\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mathematical operators</h2>\n<p>Typical mathematical operators and parentheses are supported.</p>\n<ul>\n<li><code class=\"language-text\">2 + 3</code>, <code class=\"language-text\">@.count + 1</code> - numerical addition</li>\n<li><code class=\"language-text\">2 - 3</code>, <code class=\"language-text\">@.count - 1</code> - numerical subtraction</li>\n<li><code class=\"language-text\">2 * 3</code>, <code class=\"language-text\">@.count * 2</code> - numerical multiplication</li>\n<li><code class=\"language-text\">2 / 3</code>, <code class=\"language-text\">@.count / 2</code> - numerical division</li>\n<li><code class=\"language-text\">2 + 6 / 2</code> - yields value <code class=\"language-text\">5</code>, as expected</li>\n<li><code class=\"language-text\">(2 + 6) / 2</code> - yields value <code class=\"language-text\">4</code></li>\n</ul>\n<p>Internally, type conversion is avoided as long as possible, i.e. adding two integer values will yield integer sum.</p>\n<h2 id=\"string-concatenation\"><a href=\"#string-concatenation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>String concatenation</h2>\n<p>If any of the addition operands has a string value, addition will become string concatenation</p>\n<ul>\n<li><code class=\"language-text\">2 + &quot;3&quot;</code>, <code class=\"language-text\">&quot;2&quot; + 3</code> - both expressions yield string value <code class=\"language-text\">&quot;23&quot;</code></li>\n<li><code class=\"language-text\">&quot;John&quot; + &quot; &quot; + &#39;Doe&#39;</code> - yields <code class=\"language-text\">&quot;John Doe&quot;</code></li>\n</ul>\n<h2 id=\"comparison-operators\"><a href=\"#comparison-operators\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Comparison operators</h2>\n<ul>\n<li><code class=\"language-text\">2 &gt; 3</code></li>\n<li><code class=\"language-text\">2 &gt;= 3</code></li>\n<li><code class=\"language-text\">2 &lt; 3</code></li>\n<li><code class=\"language-text\">2 &lt;= 3</code></li>\n<li><code class=\"language-text\">2 == 3</code></li>\n<li><code class=\"language-text\">2 != 3</code></li>\n<li><code class=\"language-text\">&#39;aaabbb&#39; ^= &#39;aa&#39;</code> - <code class=\"language-text\">true</code> if left string operand starts with right string operand</li>\n<li><code class=\"language-text\">&#39;aaabbb&#39; *= &#39;aa&#39;</code> - <code class=\"language-text\">true</code> if left string operand contains right string operand</li>\n<li><code class=\"language-text\">&#39;aaabbb&#39; $= &#39;bb&#39;</code> - <code class=\"language-text\">true</code> if left string operand ends with right string operand</li>\n</ul>\n<h2 id=\"logical-operators\"><a href=\"#logical-operators\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Logical operators</h2>\n<ul>\n<li><code class=\"language-text\">not true</code>, <code class=\"language-text\">!true</code></li>\n<li><code class=\"language-text\">true and true</code>, <code class=\"language-text\">true &amp;&amp; true</code></li>\n<li><code class=\"language-text\">true or true</code>, <code class=\"language-text\">true || true</code></li>\n</ul>\n<h2 id=\"number-ranges\"><a href=\"#number-ranges\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Number ranges</h2>\n<ul>\n<li><code class=\"language-text\">:10</code> - range from <code class=\"language-text\">0</code> (inclusive) to <code class=\"language-text\">10</code> (inclusive)</li>\n<li><code class=\"language-text\">1:10</code> - range from <code class=\"language-text\">1</code> (inclusive) to <code class=\"language-text\">10</code> (inclusive)</li>\n<li><code class=\"language-text\">0:2:10</code> - range from <code class=\"language-text\">0</code> (inclusive) to <code class=\"language-text\">10</code> (inclusive) with <code class=\"language-text\">2</code> increments</li>\n<li><code class=\"language-text\">5:-0.1:-1.4</code> - floats in ranges are also supported</li>\n<li><code class=\"language-text\">1..10</code> - range from <code class=\"language-text\">1</code> (inclusive) to <code class=\"language-text\">10</code> (inclusive)</li>\n<li><code class=\"language-text\">..10</code> - range from <code class=\"language-text\">0</code> (inclusive) to <code class=\"language-text\">10</code> (inclusive)</li>\n</ul>\n<h2 id=\"context\"><a href=\"#context\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Context</h2>\n<p>Every <code class=\"language-text\">Opath</code> expression is executed in the context of <strong>root</strong> (denoted <code class=\"language-text\">$</code>) and <strong>current</strong>\n(denoted <code class=\"language-text\">@</code>) elements. To access any element in the object tree, it's relation to\nthe <strong>current</strong> (<code class=\"language-text\">@</code>) or <strong>root</strong> (<code class=\"language-text\">$</code>) element needs to be defined, much like for\npaths in the filesystem are relative to the current directory, or filesystem root.\nFor expressions based at the <strong>current</strong> element, explicit denotion of <code class=\"language-text\">@</code> can usually be omitted.</p>\n<ul>\n<li><code class=\"language-text\">@.name</code> - returns the value of property \"name\" from the <strong>current</strong> element</li>\n<li><code class=\"language-text\">name</code> - same as above</li>\n<li><code class=\"language-text\">$.name</code> - returns the value of property \"name\" from the <strong>root</strong> element</li>\n</ul>\n<h2 id=\"indexing-for-arrays\"><a href=\"#indexing-for-arrays\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Indexing for arrays</h2>\n<p>Array elements can be accessed with <code class=\"language-text\">[]</code> notation. Arrays are indexed starting from <code class=\"language-text\">0</code>.</p>\n<ul>\n<li><code class=\"language-text\">@[0]</code> - returns the first element of the <strong>current</strong> array</li>\n<li><code class=\"language-text\">@[0, 1..3, 5]</code> - arrays can be indexed by multiple comma-separated indices as well as ranges of indices</li>\n<li><code class=\"language-text\">@[-1,-2]</code> - negative indices are calculated from the end of an array, <code class=\"language-text\">-1</code> being the last element of an array</li>\n<li><code class=\"language-text\">@[3..]</code> - when using ranges in array indexing expressions (inside <code class=\"language-text\">[]</code>), range ending value can be omitted,\nand it will be equal to the array length (number of array elements)</li>\n</ul>\n<p>Accessing array with out-of-bounds index values yields empty result. Accessing array element on a non-array\nand non-object type yields empty result.</p>\n<h2 id=\"property-access-for-objects\"><a href=\"#property-access-for-objects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Property access for objects</h2>\n<p>Properties in objects can be accessed with typical <code class=\"language-text\">.</code> or <code class=\"language-text\">[]</code> notations.</p>\n<ul>\n<li><code class=\"language-text\">name</code> - returns the value of property \"name\" from the <strong>current</strong> element</li>\n<li><code class=\"language-text\">@[name]</code> - same as above, with <code class=\"language-text\">[]</code> notation</li>\n<li><code class=\"language-text\">[name]</code> - this is illegal!</li>\n<li><code class=\"language-text\">@.&quot;name&quot;</code>, <code class=\"language-text\">@[&quot;name&quot;]</code> - property names can be quoted, and if so, can contain spaces and special characters</li>\n<li><code class=\"language-text\">&quot;name&quot;</code> - this is string literal, not property access!</li>\n<li><code class=\"language-text\">@.(first_name, last_name, age)</code> - one can select a few properties with a single expression using parentheses</li>\n</ul>\n<p>Accessing an nonexistent property yields empty result. Accessing a property on a non-object type also yields\nempty result.</p>\n<h2 id=\"property-indexing-for-objects\"><a href=\"#property-indexing-for-objects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Property indexing for objects</h2>\n<p>Every object can also be indexed as an array, where index value will correspond with property position within\nthe object. For example if <strong>current</strong> object will be:</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber 0\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>expression <code class=\"language-text\">@[1]</code> will yield string value <code class=\"language-text\">&quot;Doe&quot;</code> (value of the secod property). Objects have strictly defined\nand stable insertion order of properties.</p>\n<h2 id=\"property--element-filtering\"><a href=\"#property--element-filtering\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Property / element filtering</h2>\n<p>Properties in objects or elements in arrays can also be filtered with logical expressions inside <code class=\"language-text\">[]</code> notation.</p>\n<ul>\n<li><code class=\"language-text\">@[@.@key $= &quot;name&quot;]</code> - yields <strong>current</strong> element property values for which property name ends with <code class=\"language-text\">&quot;name&quot;</code>.</li>\n<li><code class=\"language-text\">@[@.@index &gt;= 3]</code> - yields <strong>current</strong> element properties / elements with index greater or equal <code class=\"language-text\">3</code></li>\n</ul>\n<p>Note that inside the <code class=\"language-text\">[]</code> expression the <strong>current</strong> element (<code class=\"language-text\">@</code>) becomes the child of the outer element.</p>\n<h2 id=\"property--element-access-wildcard-operator-\"><a href=\"#property--element-access-wildcard-operator-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Property / element access wildcard operator <code class=\"language-text\">*</code></h2>\n<ul>\n<li><code class=\"language-text\">@.*</code>, <code class=\"language-text\">@[*]</code> - yields all properties of the <strong>current</strong> object or all elements of the <strong>current</strong> array, or\nempty result, depending on the <strong>current</strong> type</li>\n</ul>\n<h2 id=\"property--element-access-recursive-descent-operator-\"><a href=\"#property--element-access-recursive-descent-operator-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Property / element access recursive descent operator <code class=\"language-text\">**</code></h2>\n<ul>\n<li><code class=\"language-text\">@.**</code>, <code class=\"language-text\">@[**]</code> - yields all properties of the <strong>current</strong> object, and recursively all of their properties in\ndepth-first descending order.</li>\n<li><code class=\"language-text\">@.&quot;**&quot;</code>, <code class=\"language-text\">@[&#39;**&#39;]</code> - this will also proto.work as above.</li>\n<li>\n<p><code class=\"language-text\">@.**{1,4}</code>, <code class=\"language-text\">@.**{,4}</code>, <code class=\"language-text\">@.**{2}</code>, <code class=\"language-text\">@.**{0,2}</code>- optionally depth level range can be specified. The depth level\nis specified relative from the element being accessed (<strong>current</strong> in those examples).</p>\n<ul>\n<li>if minimal depth level value is omitted, <code class=\"language-text\">1</code> is assumed.</li>\n<li>if maximal depth level is omitted, descend operator will be unbound from the top, i.e. will continue for all descendants.</li>\n<li>if minimal depth level value is <code class=\"language-text\">0</code>, the result will also include accessed element itself.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"parent-access-operator-\"><a href=\"#parent-access-operator-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Parent access operator <code class=\"language-text\">^</code></h2>\n<ul>\n<li><code class=\"language-text\">@^</code> - this yields parent element of the <strong>current</strong> element. </li>\n<li><code class=\"language-text\">@.name^</code> - if <strong>current</strong> element is an object and contains \"name\" property, this expression will yield\n<strong>current</strong> element.</li>\n</ul>\n<h2 id=\"ascendant-access-recursive-operator-\"><a href=\"#ascendant-access-recursive-operator-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ascendant access recursive operator <code class=\"language-text\">^**</code></h2>\n<ul>\n<li><code class=\"language-text\">@^**</code> - yields all ascendants of the <strong>current</strong> element, in order of decreasing depth. The last element will\nbe <strong>root</strong>.</li>\n<li><code class=\"language-text\">@^**{1,4}</code>, <code class=\"language-text\">@^**{,4}</code>, <code class=\"language-text\">@^**{2}</code>- optionally recursive distance range can be specified, analogically like\nfor <code class=\"language-text\">**</code>. The distance is specified relative from the element being accessed.</li>\n</ul>\n<h2 id=\"metadata-attributes\"><a href=\"#metadata-attributes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Metadata (attributes)</h2>\n<p>All elements contain readable metadata (attributes). Those attributes are accessed like regular properties, but with\nname prefixed with <code class=\"language-text\">@</code> character.</p>\n<ul>\n<li><code class=\"language-text\">@.@index</code> - index of <strong>current</strong> element in its parent (if the parent is an object, this will be the property position)</li>\n<li><code class=\"language-text\">@.@key</code> - property name of <strong>current</strong> element in its parent (for arrays this will be string value of index)</li>\n<li><code class=\"language-text\">@.@level</code> - distance from the <strong>root</strong> element for <strong>current</strong> element,</li>\n<li><code class=\"language-text\">@.@kind</code> - string value of <strong>current</strong> element's kind, either one of <code class=\"language-text\">&quot;null&quot;</code>, <code class=\"language-text\">&quot;boolean&quot;</code>, <code class=\"language-text\">&quot;number&quot;</code>, <code class=\"language-text\">&quot;string&quot;</code>,\n<code class=\"language-text\">&quot;binary&quot;</code>, <code class=\"language-text\">&quot;object&quot;</code>, <code class=\"language-text\">&quot;array&quot;</code></li>\n<li><code class=\"language-text\">@.@file</code> - string describing the file or file structure, <strong>current</strong> element was read from (if any), for instance\n<code class=\"language-text\">&quot;file&lt;yaml&gt;:./data.yml&quot;</code>.</li>\n<li><code class=\"language-text\">@.@file_type</code>- string with file type (if any), either <code class=\"language-text\">&quot;file&quot;</code> or <code class=\"language-text\">&quot;dir&quot;</code></li>\n<li><code class=\"language-text\">@.@file_format</code>- string with file format (if any), supported values are: <code class=\"language-text\">&quot;json&quot;</code>, <code class=\"language-text\">&quot;yaml&quot;</code>, <code class=\"language-text\">&quot;toml&quot;</code>, <code class=\"language-text\">&quot;text&quot;</code>,\n<code class=\"language-text\">&quot;binary&quot;</code> </li>\n<li><code class=\"language-text\">@.@file_path</code>- string with file path (if any), for instance <code class=\"language-text\">&quot;./data.yml&quot;</code></li>\n<li><code class=\"language-text\">@.@file_name</code>- string with file name (if any), for instance <code class=\"language-text\">&quot;data.yml&quot;</code></li>\n<li><code class=\"language-text\">@.@file_stem</code>- string with file stem (if any), for instance <code class=\"language-text\">&quot;data&quot;</code>. For file names starting with <code class=\"language-text\">&quot;.&quot;</code>,\nlike <code class=\"language-text\">&quot;.data.yml&quot;</code> stem will be <code class=\"language-text\">&quot;.data&quot;</code> </li>\n<li><code class=\"language-text\">@.@file_ext</code>- string with file extension (if any), for instance <code class=\"language-text\">&quot;yml&quot;</code></li>\n<li><code class=\"language-text\">@.@path</code> - path to the <strong>current</strong> element from the <strong>root</strong>, for instance <code class=\"language-text\">&quot;$.nested.array[3]&quot;</code></li>\n</ul>\n","sidebar":"docs","next":"/docs/template/","prev":"/docs/model/","headings":[{"depth":1,"value":"Opath query language","anchor":"#opath-query-language"},{"depth":2,"value":"Data types","anchor":"#data-types"},{"depth":2,"value":"Literals","anchor":"#literals"},{"depth":2,"value":"Type conversions","anchor":"#type-conversions"},{"depth":2,"value":"Mathematical operators","anchor":"#mathematical-operators"},{"depth":2,"value":"String concatenation","anchor":"#string-concatenation"},{"depth":2,"value":"Comparison operators","anchor":"#comparison-operators"},{"depth":2,"value":"Logical operators","anchor":"#logical-operators"},{"depth":2,"value":"Number ranges","anchor":"#number-ranges"},{"depth":2,"value":"Context","anchor":"#context"},{"depth":2,"value":"Indexing for arrays","anchor":"#indexing-for-arrays"},{"depth":2,"value":"Property access for objects","anchor":"#property-access-for-objects"},{"depth":2,"value":"Property indexing for objects","anchor":"#property-indexing-for-objects"},{"depth":2,"value":"Property / element filtering","anchor":"#property--element-filtering"},{"depth":2,"value":"Property / element access wildcard operator *","anchor":"#property--element-access-wildcard-operator-"},{"depth":2,"value":"Property / element access recursive descent operator **","anchor":"#property--element-access-recursive-descent-operator-"},{"depth":2,"value":"Parent access operator ^","anchor":"#parent-access-operator-"},{"depth":2,"value":"Ascendant access recursive operator ^**","anchor":"#ascendant-access-recursive-operator-"},{"depth":2,"value":"Metadata (attributes)","anchor":"#metadata-attributes"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/docs/install/","title":"Installation"}},{"node":{"path":"/docs/template/","title":"Templates"}},{"node":{"path":"/docs/quickstart/","title":"Quick start"}},{"node":{"path":"/docs/overview/","title":"Overview"}},{"node":{"path":"/docs/procedures/","title":"Procedures"}},{"node":{"path":"/docs/opath/","title":"Opath query language"}},{"node":{"path":"/docs/model/","title":"Data model"}},{"node":{"path":"/docs/","title":"Documentation"}}]}},"context":{}}